# systemUsers/admin.py
from django.contrib import admin
from django import forms

from Record_results.models import EnterResults, StudentsProxy
from main_setting.models import Programme, Stream, Subject, SubjectAllocation, SubjectConfig
from admission.models import StudentRegistration
from exam_setting.models import GradeScale
# from models import EnterResults, Stream, StudentsProxy
from django.urls import path, reverse
from django.utils.html import format_html
from django.shortcuts import redirect, render
from django.contrib import messages


class AcademicYearFilter(admin.SimpleListFilter):
    title = 'Academic Year'
    parameter_name = 'academic_year'

    def lookups(self, request, model_admin):
        return [(year.id, year.name) for year in AcademicYear.objects.all()]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(entry_year__id=self.value())
        return queryset

class TermFilter(admin.SimpleListFilter):
    title = 'Term'
    parameter_name = 'term'

    def lookups(self, request, model_admin):
        return [(term.id, term.name) for term in Term.objects.all()]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(entry_term__id=self.value())
        return queryset

class ClassFilter(admin.SimpleListFilter):
    title = 'Class'
    parameter_name = 'class'

    def lookups(self, request, model_admin):
        return [(cls.id, cls.class_name) for cls in Class.objects.all()]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(entry_class__id=self.value())
        return queryset

class StreamFilter(admin.SimpleListFilter):
    title = 'Stream'
    parameter_name = 'stream'

    def lookups(self, request, model_admin):
        return [(stream.id, stream.name) for stream in Stream.objects.all()]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(stream_name__id=self.value())
        return queryset

class SubjectFilter(admin.SimpleListFilter):
    title = 'Subject'
    parameter_name = 'subject'

    def lookups(self, request, model_admin):
        # Assuming that the `Subject` model has a `name` field for subject names
        return [(subject.id, subject.subject_name) for subject in Subject.objects.all()]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(subjects__id=self.value())  # Assuming `subjects` is the ManyToMany field
        return queryset

# Admin configuration

class StudentsProxyAdmin(admin.ModelAdmin):
    list_display = ('registration_number', 'first_name', 'last_name','entry_class','stream_name')
    list_filter = (AcademicYearFilter, TermFilter, ClassFilter, StreamFilter,SubjectFilter)
    search_fields = ('registration_number', 'first_name', 'last_name')
    actions = ['enter_results']
    stream_ids = []

    def has_add_permission(self, request):
        return True
    
    def has_change_permission(self, request, obj=None):
        return False 

admin.site.register(StudentsProxy, StudentsProxyAdmin)


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

@admin.register(AnnualReports)
class AnnualReports(admin.ModelAdmin):
    
    change_list_template = "admin/report_annual.html" 
    def changelist_view(self, request, extra_context=None):
            extra_context = extra_context or {}
            extra_context.update({
             "academic_year": AcademicYear.objects.all(),
             "title": "Annual Report",
          })
            
            return super().changelist_view(request, extra_context=extra_context)

    def has_add_permission(self, request):
         return False
    